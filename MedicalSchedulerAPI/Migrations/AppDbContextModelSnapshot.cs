// <auto-generated />
using System;
using MedicalschedulerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalSchedulerAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalschedulerAPI.Models.role", b =>
                {
                    b.Property<int>("roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("roleid"));

                    b.Property<string>("rolename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("roleid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MedicalschedulerAPI.Models.schedule", b =>
                {
                    b.Property<int>("scheduleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("scheduleid"));

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<int>("scheduleactivityid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("scheduledate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("shift")
                        .HasColumnType("text");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("scheduleid");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("MedicalschedulerAPI.Models.scheduleactivity", b =>
                {
                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("actionat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("activityid")
                        .HasColumnType("integer");

                    b.Property<string>("newvalue")
                        .HasColumnType("text");

                    b.Property<string>("oldvalue")
                        .HasColumnType("text");

                    b.Property<int>("scheduleid")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.ToTable("scheduleActivities");
                });

            modelBuilder.Entity("MedicalschedulerAPI.Models.user", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userid"));

                    b.Property<string>("displayname")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("googleid")
                        .HasColumnType("text");

                    b.Property<bool>("ispasswordset")
                        .HasColumnType("boolean");

                    b.Property<string>("passwordhash")
                        .HasColumnType("text");

                    b.HasKey("userid");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
